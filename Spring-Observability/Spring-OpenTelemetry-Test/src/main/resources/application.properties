spring.application.name=Spring-OpenTelemetry-Test


# Service Name (필수): Jaeger/Grafana에서 서비스 구분을 위해 사용
otel.service.name=my-spring-otel-app

# OTLP Collector Endpoints (트레이스와 메트릭을 OpenTelemetry Collector로 보냅니다)
# Docker Compose 네트워크 내에서 Collector 서비스 이름 사용
otel.exporter.otlp.endpoint=http://otel-collector:4317
# otel.exporter.otlp.traces.endpoint=http://otel-collector:4317 # 트레이스만 따로 설정 가능
# otel.exporter.otlp.metrics.endpoint=http://otel-collector:4317 # 메트릭만 따로 설정 가능

# 메트릭 내보내기 주기 (기본 60초, 테스트 시 짧게 설정 권장)
otel.metric.export.interval=5000 # 5초마다 메트릭 전송

# 액추에이터 엔드포인트 노출 (Prometheus가 직접 스크랩할 경우 필요)
management.endpoints.web.exposure.include=health,info,prometheus

# 로깅 패턴에 트레이스/스팬 ID 포함 (선택 사항, OTel 로깅 통합 사용 시)
logging.pattern.level=%5p [${otl.trace_id:-},${otl.span_id:-}]